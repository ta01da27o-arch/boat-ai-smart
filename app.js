// app.js
console.log("‚úÖ app.js loaded");

// „Éá„Éº„Çø„Éë„ÇπÔºàindex.html„ÅÆ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„ÇíÂà©Áî®Ôºâ
const DATA_PATH = window.DATA_PATH || "./data/data.json";
const HISTORY_PATH = window.HISTORY_PATH || "./data/history.json";

// UIË¶ÅÁ¥†
const todayBtn = document.getElementById("todayBtn");
const yesterdayBtn = document.getElementById("yesterdayBtn");
const dateLabel = document.getElementById("dateLabel");
const refreshBtn = document.getElementById("refreshBtn");
const aiStatus = document.getElementById("aiStatus");

// ÁîªÈù¢
const screenVenues = document.getElementById("screen-venues");
const screenRaces = document.getElementById("screen-races");
const screenDetail = document.getElementById("screen-detail");

// ÂêÑË¶ÅÁ¥†
const venuesGrid = document.getElementById("venuesGrid");
const racesGrid = document.getElementById("racesGrid");
const entryTableBody = document.querySelector("#entryTable tbody");
const aiMainBody = document.querySelector("#aiMain tbody");
const aiSubBody = document.querySelector("#aiSub tbody");
const commentTableBody = document.querySelector("#commentTable tbody");
const rankingTableBody = document.querySelector("#rankingTable tbody");
const resultTableBody = document.querySelector("#resultTable tbody");
const resultNote = document.getElementById("resultNote");

const venueTitle = document.getElementById("venueTitle");
const raceTitle = document.getElementById("raceTitle");
const backToVenues = document.getElementById("backToVenues");
const backToRaces = document.getElementById("backToRaces");

// Áä∂ÊÖãÂ§âÊï∞
let allData = null;
let historyData = null;
let currentVenue = null;
let currentRace = null;
let currentDateType = "today";

// ========== ÂàùÊúüÂá¶ÁêÜ ==========
init();

function init() {
  loadData();
  todayBtn.onclick = () => switchDate("today");
  yesterdayBtn.onclick = () => switchDate("yesterday");
  refreshBtn.onclick = () => loadData(true);
  backToVenues.onclick = () => showScreen("venues");
  backToRaces.onclick = () => showScreen("races");
}

// ========== „Éá„Éº„ÇøË™≠Ëæº ==========
async function loadData(force = false) {
  aiStatus.textContent = "„Éá„Éº„ÇøË™≠Ëæº‰∏≠...";
  try {
    const res = await fetch(DATA_PATH + (force ? "?t=" + Date.now() : ""));
    if (!res.ok) throw new Error("data.jsonÂèñÂæóÂ§±Êïó");
    allData = await res.json();

    const res2 = await fetch(HISTORY_PATH + (force ? "?t=" + Date.now() : ""));
    historyData = res2.ok ? await res2.json() : [];

    renderVenues();
    aiStatus.textContent = "ÊúÄÊñ∞„Éá„Éº„ÇøË™≠ËæºÂÆå‰∫Ü";
  } catch (err) {
    console.error(err);
    aiStatus.textContent = "‚ùå „Éá„Éº„ÇøÂèñÂæóÂ§±Êïó";
  }
}

// ========== Êó•‰ªòÂàáÊõø ==========
function switchDate(type) {
  currentDateType = type;
  todayBtn.classList.toggle("active", type === "today");
  yesterdayBtn.classList.toggle("active", type === "yesterday");

  const date = new Date();
  if (type === "yesterday") date.setDate(date.getDate() - 1);
  dateLabel.textContent = date.toLocaleDateString("ja-JP");
  renderVenues();
}

// ========== ÁîªÈù¢Âà∂Âæ° ==========
function showScreen(name) {
  screenVenues.classList.remove("active");
  screenRaces.classList.remove("active");
  screenDetail.classList.remove("active");
  if (name === "venues") screenVenues.classList.add("active");
  if (name === "races") screenRaces.classList.add("active");
  if (name === "detail") screenDetail.classList.add("active");
}

// ========== 24Â†¥‰∏ÄË¶ßË°®Á§∫ ==========
function renderVenues() {
  if (!allData || !allData.venues) return;

  venuesGrid.innerHTML = "";
  const venues = allData.venues;
  Object.keys(venues).forEach((vName) => {
    const races = venues[vName] || [];

    const card = document.createElement("div");
    card.className = "venue-card clickable";

    const nameEl = document.createElement("div");
    nameEl.className = "v-name";
    nameEl.textContent = vName;

    const statusEl = document.createElement("div");
    statusEl.className = "v-status";
    statusEl.textContent = races.length ? `${races.length}R` : "„Éº";
    statusEl.classList.add(races.length ? "active" : "closed");

    card.appendChild(nameEl);
    card.appendChild(statusEl);
    card.onclick = () => openVenue(vName);
    venuesGrid.appendChild(card);
  });
}

// ========== „É¨„Éº„ÇπÁï™Âè∑ÁîªÈù¢ ==========
function openVenue(vName) {
  currentVenue = vName;
  const races = allData.venues[vName] || [];

  venueTitle.textContent = vName;
  racesGrid.innerHTML = "";

  const totalRaces = 12;
  for (let i = 1; i <= totalRaces; i++) {
    const btn = document.createElement("button");
    btn.className = "race-btn";
    btn.textContent = `${i}R`;

    if (races.includes(i)) {
      btn.onclick = () => openRace(vName, i);
    } else {
      btn.classList.add("disabled");
    }

    racesGrid.appendChild(btn);
  }

  showScreen("races");
}

// ========== Âá∫Ëµ∞Ë°®ÔºãAI„Éá„Éº„Çø ==========
function openRace(vName, raceNo) {
  currentRace = raceNo;
  raceTitle.textContent = `${vName} ${raceNo}R`;

  const raceData = allData.entries?.[vName]?.[raceNo];
  if (!raceData) {
    entryTableBody.innerHTML = `<tr><td colspan="8">„Éá„Éº„Çø„Å™„Åó</td></tr>`;
    return;
  }

  renderEntries(raceData.entries || []);
  renderAI(raceData.ai || {});
  renderComments(raceData.comments || []);
  renderRanking(raceData.ranking || []);
  renderResult(vName, raceNo);

  showScreen("detail");
}

// ========== Âá∫Ëµ∞Ë°®Ë°®Á§∫ ==========
function renderEntries(entries) {
  entryTableBody.innerHTML = "";
  entries.forEach((e, i) => {
    const tr = document.createElement("tr");
    tr.className = `row-${i + 1}`;
    tr.innerHTML = `
      <td>${e.number || i + 1}</td>
      <td class="entry-left">
        <div class="klass">${e.class || "-"}</div>
        <div class="name">${e.name || "-"}</div>
        <div class="st">ST:${e.st || "-"}</div>
      </td>
      <td>${e.f || "-"}</td>
      <td>${e.all || "-"}</td>
      <td>${e.local || "-"}</td>
      <td>${e.mt || "-"}</td>
      <td>${e.course || "-"}</td>
      <td class="eval-mark">${e.eval || "-"}</td>
    `;
    entryTableBody.appendChild(tr);
  });
}

// ========== AI‰∫àÊÉ≥ÔºàÊú¨ÂëΩÔºèÁ©¥Ôºâ ==========
function renderAI(aiData) {
  aiMainBody.innerHTML = "";
  aiSubBody.innerHTML = "";

  const main = aiData.main || [];
  const sub = aiData.sub || [];

  if (main.length === 0) aiMainBody.innerHTML = `<tr><td colspan="2">-</td></tr>`;
  else
    main.forEach((m) => {
      aiMainBody.innerHTML += `<tr><td>${m.buy}</td><td>${m.prob}%</td></tr>`;
    });

  if (sub.length === 0) aiSubBody.innerHTML = `<tr><td colspan="2">-</td></tr>`;
  else
    sub.forEach((s) => {
      aiSubBody.innerHTML += `<tr><td>${s.buy}</td><td>${s.prob}%</td></tr>`;
    });
}

// ========== Â±ïÈñã„Ç≥„É°„É≥„Éà ==========
function renderComments(comments) {
  commentTableBody.innerHTML = "";
  comments.forEach((c, i) => {
    commentTableBody.innerHTML += `<tr><td>${i + 1}</td><td>${c}</td></tr>`;
  });
}

// ========== AIÈ†Ü‰Ωç‰∫àÊ∏¨ ==========
function renderRanking(ranking) {
  rankingTableBody.innerHTML = "";
  ranking.forEach((r, i) => {
    rankingTableBody.innerHTML += `
      <tr>
        <td>${i + 1}</td>
        <td>${r.number}</td>
        <td>${r.name}</td>
        <td>${r.score}</td>
      </tr>`;
  });
}

// ========== „É¨„Éº„ÇπÁµêÊûúÔºàhistory.jsonÔºâ ==========
function renderResult(vName, raceNo) {
  resultTableBody.innerHTML = "";

  if (!historyData || !historyData[vName]) {
    resultNote.textContent = "‚Äª ÁµêÊûú„Éá„Éº„Çø„Å™„Åó";
    return;
  }

  const result = historyData[vName]?.[raceNo];
  if (!result) {
    resultNote.textContent = "‚Äª ÂΩìË©≤„É¨„Éº„ÇπÁµêÊûú„Å™„Åó";
    return;
  }

  result.forEach((r, i) => {
    resultTableBody.innerHTML += `
      <tr>
        <td>${i + 1}</td>
        <td>${r.number}</td>
        <td>${r.name}</td>
        <td>${r.st}</td>
      </tr>`;
  });
  resultNote.textContent = "üìä ÊúÄÊñ∞„É¨„Éº„ÇπÁµêÊûú„ÇíË°®Á§∫‰∏≠";
}